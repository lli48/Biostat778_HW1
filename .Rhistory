system.time(str(fit))
?diag
system("R CMD build Homework1")
system("R CMD check Homework1_1.0.tar.gz")
#define function
fastlm<-function(X, y, na.rm = FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm==TRUE){
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y[complete.cases(Z)])
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coeffients=betahat,vcov=cov_beta))
}
set.seed(2)
## Generate predictor matrix
n <- 1000
p <- 50
X <- cbind(1, matrix(rnorm(n * (p - 1)), n, p - 1))
## Coefficents
b <- rnorm(p)
## Response
y <- X %*% b + rnorm(n)
fit <- fastlm(X, y)
print(drop(fit$coefficients))
str(fit$vcov)
fix(x)
fix(x)
View(X)
#define function
fastlm<-function(X, y, na.rm = FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm==TRUE){
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y[complete.cases(Z)])
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coeffients=betahat,vcov=cov_beta))
}
set.seed(2)
## Generate predictor matrix
n <- 1000
p <- 50
X <- cbind(1, matrix(rnorm(n * (p - 1)), n, p - 1))
## Coefficents
b <- rnorm(p)
## Response
y <- X %*% b + rnorm(n)
fit <- fastlm(X, y)
print(drop(fit$coefficients))
str(fit$vcov)
View(X)
str(fit$coefficients)
fix(fit)
#define function
fastlm<-function(X, y, na.rm = FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm==TRUE){
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y[complete.cases(Z)])
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
set.seed(2)
## Generate predictor matrix
n <- 1000
p <- 50
X <- cbind(1, matrix(rnorm(n * (p - 1)), n, p - 1))
## Coefficents
b <- rnorm(p)
## Response
y <- X %*% b + rnorm(n)
fit <- fastlm(X, y)
print(drop(fit$coefficients))
str(fit$vcov)
system.time(str(fit))
system("R CMD build Homework1")
system("R CMD check Homework1_1.0.tar.gz")
#define function
fastlm<-function(X, y, na.rm = FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm==TRUE){
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y[complete.cases(Z)])
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
library(Homework1)
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
fit <- fastlm(X, y, na.rm = TRUE)
print(drop(fit$coefficients))
print(fit$vcov)
options(op)
#define function
fastlm<-function(X, y, na.rm = FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm!=FALSE){
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y[complete.cases(Z)])
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
library(Homework1)
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
fit <- fastlm(X, y, na.rm = TRUE)
print(drop(fit$coefficients))
print(fit$vcov)
options(op)
fix(fit)
View(X)
fix(y)
fix(y)
?complete.cases
View(X)
View(X)
#define function
fastlm<-function(X, y, na.rm=FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm!=FALSE){
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y[complete.cases(Z)])
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
fit <- fastlm(X, y, na.rm = TRUE)
print(drop(fit$coefficients))
print(fit$vcov)
options(op)
?if
help if
help if loop
View(X)
#define function
fastlm<-function(X, y, na.rm=FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm!=FALSE) {
Z=cbind(X,y)
X=X[,complete.cases(Z)]
y=as.matrix(y[complete.cases(Z),])
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
fit <- fastlm(X, y, na.rm = TRUE)
print(drop(fit$coefficients))
print(fit$vcov)
options(op)
#define function
fastlm<-function(X, y, na.rm=FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm!=FALSE) {
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y[complete.cases(Z),])
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
fit <- fastlm(X, y, na.rm = TRUE)
print(drop(fit$coefficients))
print(fit$vcov)
options(op)
if (na.rm!=FALSE) {
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y[complete.cases(Z),])
}
X <- cbind(1, data.matrix(airquality[, -1]))
View(X)
y <- airquality$Ozone
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y[complete.cases(Z),])
View(X)
#define function
fastlm<-function(X, y, na.rm=FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm==TRUE) {
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y[complete.cases(Z),])
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
fit <- fastlm(X, y, na.rm = TRUE)
print(drop(fit$coefficients))
print(fit$vcov)
options(op)
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=y[complete.cases(Z),]
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y)[complete.cases(Z),]
#define function
fastlm<-function(X, y, na.rm=FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm==TRUE) {
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y)[complete.cases(Z),]
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
fit <- fastlm(X, y, na.rm = TRUE)
print(drop(fit$coefficients))
print(fit$vcov)
options(op)
#define function
fastlm<-function(X, y, na.rm=FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm!=FALSE) {
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y)[complete.cases(Z),]
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
fit <- fastlm(X, y, na.rm = TRUE)
print(drop(fit$coefficients))
print(fit$vcov)
options(op)
#define function
fastlm<-function(X, y, na.rm=FALSE) {
n<-length(y)
p<-ncol(X)
#check argument na.rm
if (na.rm!=FALSE) {
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y)[complete.cases(Z)]
}
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
fit <- fastlm(X, y, na.rm = TRUE)
print(drop(fit$coefficients))
print(fit$vcov)
options(op)
#define function
fastlm<-function(X, y, na.rm=FALSE) {
#check argument na.rm
if (na.rm!=FALSE) {
Z=cbind(X,y)
X=X[complete.cases(Z),]
y=as.matrix(y)[complete.cases(Z)]
}
n<-length(y)
p<-ncol(X)
#calculating transpose(X)%*%X
A<-crossprod(X)
#calculating transpose(X)%*%y
C<-crossprod(X,y)
#cholesky decomposition
Q<-chol(A)
#solve betahat
temp1<-forwardsolve(t(Q),C)
betahat<-backsolve(Q,temp1)
#calculate covirance of beta
#note that t(e)%*%e=t(e)%*%y=t(y)%*%y-t(y)%*%X%*%betahat
#the second and the third expression is almost the same in my computer
cov_beta<-chol2inv(Q)*as.numeric(crossprod(y-X%*%betahat,y))/(n-p)
return(list(coefficients=betahat,vcov=cov_beta))
}
library(datasets)
data(airquality)
op <- options(scipen = 5)
X <- cbind(1, data.matrix(airquality[, -1]))
y <- airquality$Ozone
fit <- fastlm(X, y, na.rm = TRUE)
print(drop(fit$coefficients))
print(fit$vcov)
options(op)
View(X)
system("R CMD build Homework1")
system("R CMD check Homework1_1.0.tar.gz")
system("R CMD build Homework1")
system("R CMD check Homework1_1.0.tar.gz")
system("R CMD build Homework1")
system("R CMD check Homework1_1.0.tar.gz")
